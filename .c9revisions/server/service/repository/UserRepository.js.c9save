{"ts":1377725753489,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var env = require(\"rekuire\")(\"env\");\nvar when = require(\"when\");\nvar logger = require('winston');\nvar WhenUtil = env.require(\"/server/util/WhenUtil\");\n\nvar User = env.require(\"/server/model/User\");\nvar SelectedMovie = env.require(\"/server/model/SelectedMovie\");\n\nvar UserRepository = function() {\n\n    this.getTopSelectedMovies = function() {\n        var deferred = when.defer();\n                           \n        User.aggregate({ $project: { selectedMovies: 1 } } \n                     , { $unwind: '$selectedMovies' } \n                     , { $group: {_id: '$selectedMovies.movieId' , count: { $sum: 1 } }} \n                     , { $sort : { \"count\" : -1 } }\n                     , { $limit : 10 }\n                     ,  function(err, data) {\n                            var movieIds = data.map(function(selectedMovie) {return selectedMovie._id});\n                            deferred.resolve(movieIds);\n                        });\n        \n        return deferred.promise; \n    };\n    \n    this.getEventId = function(userId, movieId) {\n        var deferred = when.defer();\n                        \n        var query = {\"id\": userId};\n              \n        User.findOne(query, function(err, user) {\n            WhenUtil.call(deferred, err, findEventId(user.selectedMovies, movieId));\n        });\n        \n        return deferred.promise; \n    };\n    \n    this.findOne = function(userId) {\n        var deferred = when.defer();\n                        \n        var query = {\"id\": userId};\n              \n        User.findOne(query, function(err, user) {\n            WhenUtil.call(deferred, err, user);\n        });\n        \n        return deferred.promise; \n    };\n    \n    this.findOneAndUpdate = function(userId, userName, accessToken) {\n        var deferred = when.defer();\n                        \n        var query = {\"id\": userId};\n        var options = {upsert: true};\n        var user = {\"id\": userId, \"name\": userName, \"accessToken\": accessToken};\n              \n        User.findOneAndUpdate(query, user, options, function(err, user) {\n            console.log(err, user);\n            WhenUtil.call(deferred, err, {'id' : user.id, 'name' : user.name, 'accessToken': accessToken, 'calendarId' : user.calendarId});\n        });\n        \n        return deferred.promise; \n    };\n\n    this.setCalendarId = function(userId, calendarId) {\n        var deferred = when.defer();\n        \n        User.update({'id': userId}, {'calendarId': calendarId}, function(err) {\n           WhenUtil.call(deferred, err, userId);\n        });\n        \n        return deferred.promise;   \n    };\n    \n    this.findById = function(userId) {\n        \n        var deferred = when.defer();\n                \n        User.findOne( {'id': userId}, function(err, user) {\n           WhenUtil.call(deferred, err, user);\n        });\n        \n        return deferred.promise; \n    };\n    \n    this.markMovie = function(userId, movieId, eventId) {\n        \n        var deferred = when.defer();\n                \n        User.update({'id': userId}, {'$addToSet': {'selectedMovies': new SelectedMovie({'movieId' : movieId, 'eventId' : eventId})}}, function(err) {\n           WhenUtil.call(deferred, err, userId);\n        });\n        \n        return deferred.promise;    \n    };\n    \n    this.unmarkMovie = function(userId, movieId) {\n        \n        var deferred = when.defer();\n        \n        User.update({'id': userId}, {'$pull': {'selectedMovies': {'movieId' : movieId}}}, function(err) {\n            WhenUtil.call(deferred, err, userId);\n        });\n        \n        return deferred.promise;    \n    };\n    \n    function findEventId(selectedMovies, movieId) {\n        \n        if(!selectedMovies || !movieId) {\n            return undefined;\n        }\n        \n        var eventId;\n        selectedMovies.forEach(function(selectedMovie) {\n            if(selectedMovie.movieId == movieId) {\n                eventId = selectedMovie.eventId;\n                return false;\n            }\n        });\n        \n        logger.info(\"Found event(%s)\", eventId);\n        \n        return eventId;\n    }\n    \n};\n\nmodule.exports = new UserRepository();"]],"start1":0,"start2":0,"length1":0,"length2":4118}]],"length":4118}
{"contributors":[],"silentsave":false,"ts":1377725623556,"patch":[[{"diffs":[[0,"\");\n"],[-1,"var SelectedMovie = env.require(\"/server/model/SelectedMovie\");\n\nvar UserRepository = function() {\n\n    this.getTopSelectedMovies = function() {\n        var deferred = when.defer();\n                           \n        User.aggregate({ $project: { selectedMovies: 1 } } \n                     , { $unwind: '$selectedMovies' } \n                     , { $group: {_id: '$selectedMovies.movieId' , count: { $sum: 1 } }} \n                     , { $sort : { \"count\" : -1 } }\n                     , { $limit : 10 }\n                     ,  function(err, data) {\n                            var movieIds = data.map(function(selectedMovie) {return selectedMovie._id});\n                            deferred.resolve(movieIds);\n                        });\n        \n        return deferred.promise; \n    };\n    \n    this.getEventId = function(userId, movieId) {\n        var deferred = when.defer();\n                        \n        var query = {\"id\": userId};\n              \n        User.findOne(query, function(err, user) {\n            WhenUtil.call(deferred, err, findEventId(user.selectedMovies, movieId));\n        });\n        \n        return deferred.promise; \n    };\n    \n    this.findOne = function(userId) {\n        var deferred = when.defer();\n                        \n        var query = {\"id\": userId};\n              \n        User.findOne(query, function(err, user) {\n            WhenUtil.call(deferred, err, user);\n        });\n        \n        return deferred.promise; \n    };\n    \n    this.findOneAndUpdate = function(userId, userName, accessToken) {\n        var deferred = when.defer();\n                        \n        var query = {\"id\": userId};\n        var options = {upsert: true};\n        var user = {\"id\": userId, \"name\": userName, \"accessToken\": accessToken};\n              \n        User.findOneAndUpdate(query, user, options, function(err, user) {\n            console.log(err, user);\n            WhenUtil.call(deferred, err, {'id' : user.id, 'name' : user.name, 'accessToken': accessToken, 'calendarId' : user.calendarId});\n        });\n        \n        return deferred.promise; \n    };\n\n    this.setCalendarId = function(userId, calendarId) {\n        var deferred = when.defer();\n        \n        User.update({'id': userId}, {'calendarId': calendarId}, function(err) {\n           WhenUtil.call(deferred, err, userId);\n        });\n        \n        return deferred.promise;   \n    };\n    \n    this.findById = function(userId) {\n        \n        var deferred = when.defer();\n                \n        User.findOne( {'id': userId}, function(err, user) {\n           WhenUtil.call(deferred, err, user);\n        });\n        \n        return deferred.promise; \n    };\n    \n    this.markMovie = function(userId, movieId, eventId) {\n        \n        var deferred = when.defer();\n                \n        User.update({'id': userId}, {'$addToSet': {'selectedMovies': new SelectedMovie({'movieId' : movieId, 'eventId' : eventId})}}, function(err) {\n           WhenUtil.call(deferred, err, userId);\n        });\n        \n        return deferred.promise;    \n    };\n    \n    this.unmarkMovie = function(userId, movieId) {\n        \n        var deferred = when.defer();\n        \n        User.update({'id': userId}, {'$pull': {'selectedMovies': {'movieId' : movieId}}}, function(err) {\n            WhenUtil.call(deferred, err, userId);\n        });\n        \n        return deferred.promise;    \n    };\n    \n    function findEventId(selectedMovies, movieId) {\n        \n        if(!selectedMovies || !movieId) {\n            return undefined;\n        }\n        \n        var eventId;\n        selectedMovies.forEach(function(selectedMovie) {\n            if(selectedMovie.movieId == movieId) {\n                eventId = selectedMovie.eventId;\n                return false;\n            }\n        });\n        \n        logger.info(\"Found event(%s)\", eventId);\n        \n        return eventId;\n    }"],[1,"\nvar UserRepository = function() {\n\n    this.findOne = function(userId) {\n        var deferred = when.defer();\n                        \n        var query = {\"id\": userId};\n              \n        User.findOne(query, function(err, user) {\n            WhenUtil.call(deferred, err, user);\n        });\n        \n        return deferred.promise; \n    };\n    \n    this.findOneAndUpdate = function(userId, userName, accessToken) {\n        var deferred = when.defer();\n                        \n        var query = {\"id\": userId};\n        var options = {upsert: true};\n        var user = {\"id\": userId, \"name\": userName, \"accessToken\": accessToken};\n              \n        User.findOneAndUpdate(query, user, options, function(err, user) {\n            console.log(err, user);\n            WhenUtil.call(deferred, err, {'id' : user.id, 'name' : user.name, 'accessToken': accessToken, 'calendarId' : user.calendarId});\n        });\n        \n        return deferred.promise; \n    };\n\n    this.findById = function(userId) {\n        \n        var deferred = when.defer();\n                \n        User.findOne( {'id': userId}, function(err, user) {\n           WhenUtil.call(deferred, err, user);\n        });\n        \n        return deferred.promise; \n    };"],[0,"\n   "]],"start1":194,"start2":194,"length1":3880,"length2":1245}]],"length":1483,"saved":false}
